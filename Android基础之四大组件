Android基础篇

1、Android支持的五种基本布局：

LinearLayout、RelativeLayout 、FrameLayout、TableLayout、AbsoluteLayout 都是viewGroup的子类。

2、Activity生命周期：

    启动Activity: onCreate()—>onStart()—>onResume()，Activity进入运行状态。

    Activity退居后台: 当前Activity转到新的Activity界面或按Home键回到主屏： onPause()—>onStop()，进入停滞状态。

    Activity返回前台: onRestart()—>onStart()—>onResume()，再次回到运行状态。

    Activity退居后台，且系统内存不足， 系统会杀死这个后台状态的Activity（此时这个Activity引用仍然处在任务栈中，
    只是这个时候引用指向的对象已经为null），若再次回到这个Activity,则会走onCreate()–>onStart()—>onResume()
    (将重新走一次Activity的初始化生命周期)

    锁屏：onPause()->onStop()

    解锁：onStart()->onResume()

3、Activity启动方式：

android:launchMode="standard|singleInstance|singleTask|singleTop"来控制Acivity任务栈。
避免重复点击：利用singleTask启动方式
主界面启动方式：singleTop,当返回到主界面时可以直接退出。

4、界面异常退出保存状态：

当某个activity变得“容易”被系统销毁时，该activity的onSaveInstanceState就会被执行，除非该activity是被用户主动销毁的，例如当用户按BACK键的时候。 
由于onSaveInstanceState()方法调用的不确定性，你应该只使用这个方法去记录activity的瞬间状态（UI的状态）。不应该用这个方法去存储持久化数据。
当用户离开这个activity的时候应该在onPause()方法中存储持久化数据（例如应该被存储到数据库中的数据）。

onSaveInstanceState()如果被调用，这个方法会在onStop()前被触发，但系统并不保证是否在onPause()之前或者之后触发。

恢复出保存的状态：onRestoreInstanceState

onRestoreInstanceState的bundle参数也会传递到onCreate方法中，你也可选择在onCreate方法中做数据还原。onRestoreInstanceState在onstart之后执行。
开发中Activity的一些问题

一般设置Activity为非公开的　

<activity  
android:exported="false" /> 

注意：非公开的Activity不能设置intent-filter，以免被其他activity唤醒（如果拥有相同的intent-filter）。

    不要指定activity的taskAffinity属性

    不要设置activity的LaunchMode（保持默认）

　　注意Activity的intent最好也不要设定为FLAG_ACTIVITY_NEW_TASK

    在匿名内部类中使用this时加上activity类名（类名.this,不一定是当前activity）

    设置activity全屏在其 onCreate()方法中加入：
// 设置全屏模式
 getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); 
 // 去除标题栏
 requestWindowFeature(Window.FEATURE_NO_TITLE);
对Fragment的介绍暂时先放在这里：
Fragment与Activity交互
    Activity中已经有了该Fragment的引用，直接通过该引用进行交互。
-如果没引用可以通过调用fragment的函数findFragmentById()或者findFragmentByTag()，从FragmentManager中获取Fragment的索引，例如：

ExampleFragment fragment = (ExampleFragment) getFragmentManager().findFragmentById(R.id.example_fragment);

    在Fragment中可以通过getActivity得到当前绑定的Activity的实例。

    创建activity事件回调函数，在fragment内部定义一个回调接口，宿主activity来实现它。
　使用Fragment 能够把内存缓存对象传递到新的activity实例中，调用setRetainInstance(true)) 方法来保留Fragment实例。当activity重新创建好后，
 被保留的Fragment依附于activity而存在，通过Fragment就可以获取到已经存在的内存缓存对象了，这样就可以快速的获取到图片，并设置到ImageView上，
 给用户一个流畅的体验。

5、广播(Broadcast Receiver)的两种动态注册和静态注册有什么区别。

    静态注册：在AndroidManifest.xml文件中进行注册，当App退出后，Receiver仍然可以接收到广播并且进行相应的处理

    动态注册：在代码中动态注册，当App退出后，也就没办法再接受广播了。
    生命周期：生成 --> 注册 --> onReceive()-->取消注册.
    　一般：在onStart中注册，onStop中取消unregisterReceiver
     
6、各个组件的响应ANR:

应用在5秒内未响应用户的输入事件（如按键或者触摸）

BroadcastReceiver未在10秒内完成相关的处理
前台广播10s超时，后台广播（默认是后台广播）60s超时，这还要看是无序广播还是有序广播，是动态注册还是静态注册。
Service在特定的时间内无法处理完成 20秒

以上情况就会发生ANR异常。
7、注意点：
Activity的onCreate和onResume回调中尽量避免耗时的代码
BroadcastReceiver中onReceive代码也要尽量减少耗时，建议使用IntentService处理。
service能否同时调用它的两种启动方式（）startService 和bindService()
可以，当你在一个界面（activity）通过startService启动了一个service的时候，如果在另一个界面需要与该service做一些交互操作，则可以通过
bindService() 获取当前service。当所有的通过bindService绑定的service的模块都取消service绑定的时候，调用stopService(）才会成功。

8、如何保证service在后台不被Kill？
一、onStartCommand方法，返回START_STICKY

    START_STICKY 在运行onStartCommand后service进程被kill后，那将保留在开始状态，但是不保留那些传入的intent。
    不久后service就会再次尝试重新创建，因为保留在开始状态，在创建service后将保证调用onstartCommand。
    如果没有传递任何开始命令给service，那将获取到null的intent。

    START_NOT_STICKY 在运行onStartCommand后service进程被kill后，并且没有新的intent传递给它。
    Service将移出开始状态，并且直到新的明显的方法（startService）调用才重新创建。因为如果没有传递任何未决定的intent那么service是不会启动，
    也就是期间onstartCommand不会接收到任何null的intent。

    START_REDELIVER_INTENT 在运行onStartCommand后service进程被kill后，系统将会再次启动service，并传入最后一个intent给onstartCommand。
    直到调用stopSelf(int)才停止传递intent。如果在被kill后还有未处理好的intent，那被kill后服务还是会自动启动。
    因此onstartCommand不会接收到任何null的intent。

二、提升service优先级

在AndroidManifest.xml文件中对于intent-filter可以通过android:priority = "1000"这个属性设置最高优先级，1000是最高值，
如果数字越小则优先级越低，同时适用于广播。但是该方法并不能保证service一定会不被杀死，只是降低了service被杀死的几率。
三、提升service进程优先级

Android中的进程是托管的，当系统进程空间紧张的时候，会依照优先级自动进行进程的回收。Android将进程分为6个等级,它们按优先级顺序由高到低依次是:

    前台进程( FOREGROUND_APP)
    可视进程(VISIBLE_APP )
    次要服务进程(SECONDARY_SERVER )
    后台进程 (HIDDEN_APP)
    内容供应节点(CONTENT_PROVIDER)
    空进程(EMPTY_APP)
因此，前台进程是最不容易被杀死的。空进程当Java虚拟机回收内存时会回收。
  
四、onDestroy方法里重启service
根据service的生命周期，在service销毁过程中，正常情况下肯定会经历Destroy生命周期，因此该方法会使得当destroy的时候重启service服务。
可在ondestroy方法中发送一个广播，然后在接受广播时重启Service。

判断Service是否正在运行：
private boolean isServiceRunning() {
    ActivityManager manager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
              List<ActivityManager.RunningServiceInfo> runServiceList = manager  
                .getRunningServices(defaultNum); // 获取多少个。
        return "com.example.demo.BindService".equals(service.service.getClassName()))；
}

9、IntentService 与service的不同点：
先来讲一下IntentService:
IntentService继承与Service，用来处理异步请求。客户端可以通过startService(Intent)方法传递请求给IntentService。
IntentService在onCreate()函数中通过HandlerThread单独开启一个线程来依次处理所有Intent请求对象所对应的任务
这样以免事务处理阻塞主线程（ＡＮＲ）。执行完所一个Intent请求对象所对应的工作之后，如果没有新的Intent请求达到，则自动停止Service；
否则执行下一个Intent请求所对应的任务。这就是与Service的主要区别，service中不能做一些超时的任务。
使用IntentService需要实现的两个方法： 　

    构造函数　
　　IntentService的构造函数一定是参数为空的构造函数，然后再在其中调用super("name")这种形式的构造函数。
  因为Service的实例化是系统来完成的，而且系统是用参数为空的构造函数来实例化Service的。
  
    实现虚函数onHandleIntent
　　在里面根据Intent的不同进行不同的事务处理。好处：处理异步请求的时候可以减少写代码的工作量，比较轻松地实现项目的需求。
  
  
10、　BroadcastReceiver：
自身并不实现图形用户界面，但是当它收到某个通知后，BroadcastReceiver可以通过启动 Service、启动 Activity 或是 NotificationMananger 提醒用户。
注意的地方：
当系统或应用发出广播时，将会扫描系统中的所有广播接收者，通过action匹配将广播发送给相应的接收者，接收者收到广播后将会产生一个广播接收者的实例，
执行其中的onReceiver()这个方法；在该方法通过intent.getAction() 过滤掉不想接受的广播。特别需要注意的是这个实例的生命周期只有10秒，如果10秒内没执行结束onReceiver()，系统将会报出ANR异常。
在onReceiver()执行完毕之后，该实例将会被销毁，所以不要在onReceiver()中执行耗时操作，也不要在里面创建子线程处理业务（因为可能子线程没处理完，
接收者就被回收了，那么子线程也会跟着被回收掉）；正确的处理方法就是调用activity或者service处理业务。
总结：
静态广播接收的处理器是由PackageManagerService负责，当手机启动或者新安装了应用的时候，PackageManagerService会扫描手机中所有已安装的APP应用，
将AndroidManifest.xml中有关注册广播的信息解析出来，存储至一个全局静态变量当中。
动态广播接收的处理器是由ActivityManagerService负责，当APP的服务或者进程起来之后，执行了注册广播接收的代码逻辑，即进行加载，
最后会存储在一个另外的全局静态变量中。

广播接受的顺序是有区别的：
1、对于普通广播：是不关心优先级的。首先，看是否是动态注册的还是静态注册的，动态注册的比静态注册的快。动态注册的情况下，看注册的顺序。在静态注册的情况下
看扫描的时间，扫描越早接受的越快。
2、对于有序广播： 先看优先级，肯定优先级越高接受的越快。然后动态广播还是快于静态广播，动态广播情况下看注册的快慢，静态广播情况下看扫描前后。




