这样一种场景：刚上线的应用，不断收到用户反馈的bug，老板命令我们马上解决，我们紧急定位发现错了一行代码，然后修改完重新打包App、测试、向各个应用市场和渠道
换包、提示用户进行升级然后下载、覆盖安装，经过这一通的过程，实际只是修改了一行代码，或者只是加一个！不是身累，而是心累。。。
因此，需要作出一种突破，将这一过程简单化。面对日新月异的新兴技术，我们程序员需要不断提升自己，积极面对挑战。最近几年，对于Android开发，经常提到热修复
在用户不知情况下紧急修复突发的故障，最近兴起的热修复方案主要包括淘宝的Dexposed、支付宝的AndFix、QQ空间的ClassLoader、微信的Tinker、Nuwa五种
热修复：当线上应用出现紧急BUG，为了避免重新发版，并且保证修复的及时性而进行的一项在线推送补丁的修复方案。
该技术就是为了解决传统修复方案的弊端，因此体现出很多的优点：
无需重新发版，实时高效热修复
用户无感知修复，无需下载新的应用，代价小
修复成功率高，把损失降到最低

那我们就学习一下广泛度比较高的三种：

QQ空间的ClassLoader

超级补丁技术基于DEX分包方案，使用了多DEX加载的原理，大致的过程就是：
把BUG方法修复以后，放到一个单独的DEX里，插入到dexElements数组的最前面，让虚拟机去加载修复完后的方法。

例如 在test.calss类中，有几个地方出现bug,我们需要替换该文件。
因此，修改test.class类后，打包到patch.dex中，并且将该包放到加载原先test.class类的dex文件之前，这样Android状态机就会优先加载patch.dex，并且不会
加载原有故障的de包。这样就实现了替换，修补了故障。
但是有一个问题是，当两个调用关系的类不在同一个DEX时，就会产生异常报错。我们知道，在APK安装时，虚拟机需要将classes.dex优化成odex文件，然后才会执行。
在这个过程中，会进行类的verify操作，如果调用关系的类都在同一个DEX中的话就会被打上CLASS_ISPREVERIFIED的标志，然后才会写入odex文件。
所以，为了可以正常的进行打补丁修复，必须避免类被打上CLASS_ISPREVERIFIED标志，具体的做法就是单独放一个类在另外DEX中，让其他类调用。

不足：

1. 不支持即时生效，必须通过重启才能生效。

2. 为了实现修复这个过程，必须在应用中加入两个DEX！dalvikhack.dex中只有一个类，对性能影响不大，但是对于patch.dex来说，修复的类到了一定数量，
就需要花不少的时间加载。对手淘这种航母级应用来说，启动耗时增加2s以上是不能够接受的事。

3. 在ART模式下，如果类修改了结构，就会出现内存错乱的问题。为了解决这个问题，就必须把所有相关的调用类、父类子类等等全部加载到patch.dex中，
导致补丁包异常的大，进一步增加应用启动加载的时候，耗时更加严重。

微信Tinker

微信针对QQ空间超级补丁技术的不足提出了一个提供DEX差量包，整体替换DEX的方案。主要的原理是与QQ空间超级补丁技术基本相同，区别在于不再将patch.dex增加
到elements数组中，而是差量的方式给出patch.dex，然后将patch.dex与应用的classes.dex合并，然后整体替换掉旧的DEX，达到修复的目的。


优势：

    合成整包，不用在构造函数插入代码，防止verify，verify和opt在编译期间就已经完成，不会在运行期间进行

    性能提高。兼容性和稳定性比较高。

    开发者透明，不需要对包进行额外处理。


不足：

    与超级补丁技术一样，不支持即时生效，必须通过重启应用的方式才能生效。

    需要给应用开启新的进程才能进行合并，并且很容易因为内存消耗等原因合并失败。

    合并时占用额外磁盘空间，对于多DEX的应用来说，如果修改了多个DEX文件，就需要下发多个patch.dex与对应的classes.dex进行合并操作时这种情况会更严重，
    因此合并过程的失败率也会更高。
    
    阿里百川HotFix
    
    阿里百川推出的热修复HotFix服务，相对于QQ空间超级补丁技术和微信Tinker来说，定位于紧急bug修复的场景下，能够最及时的修复bug，
    下拉补丁立即生效无需等待。
    
AndFix实现原理

AndFix不同于QQ空间超级补丁技术和微信Tinker通过增加或替换整个DEX的方案，提供了一种运行时在Native修改Filed指针的方式，实现方法的替换，
达到即时生效无需重启，对应用无性能消耗的目的。

最大的优势在于

    BUG修复的即时性

    补丁包同样采用差量技术，生成的PATCH体积小

    对应用无侵入，几乎无性能损耗


不足：

    不支持新增字段，以及修改方法，也不支持对资源的替换。

    由于厂商的自定义ROM，对少数机型暂不支持。

总结


QQ空间超级补丁技术和微信Tinker 支持新增类和资源的替换，在一些功能化的更新上更为强大，但对应用的性能和稳定会有的一定的影响；
增加 dex的数量，可能会导致 启动加载时间过长，易造成应用的ANR和Crash。
阿里百川HotFix虽然暂时不支持新增类和资源的替换，对新功能的发布也有所限制，但是作为一项定位为线上紧急BUG的热修复的服务来说，
能够真正做到BUG即时修复用户无感知，同时保证对应用性能不产生不必要的损耗，在热修复方面不失为一个好的选择。
